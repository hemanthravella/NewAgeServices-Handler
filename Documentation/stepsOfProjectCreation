1. Create app
2. Created app which will have custom commands
3. added MIGRATION_MODULES in settings.py to have all the migrations in one place.
4. Create a custom command to wait_for_db
5. added unit tests for the custom command
6. added to run the wait_for_db command as part of docker compose
================================================
7. Create a Customer User model inside the core app for auth and specify it in settings.py
8. created User model and User Manger which extends AbstractBaseUser,PermissionsMixin.
9.Implemented methods for CreateUser and Create SuperUser as it is customer user model now.
Ref: https://docs.djangoproject.com/en/1.8/_modules/django/contrib/auth/models/ ----> class UserManager(BaseUserManager):
10. create a serializer for User model
    1. Metal will hold the information about the model to use, fields Specifies the fields to include in the serialized representation
    2. extra_kwargs: Adds extra configurations for specific fields. REF: https://www.django-rest-framework.org/api-guide/serializers/#additional-keyword-arguments
    3. implement create and update REF: https://www.django-rest-framework.org/api-guide/serializers/#saving-instances
11. user/views.py: for create url. we will be using generics which will create a post method and writes to db
    REF : https://www.django-rest-framework.org/api-guide/generic-views/#generic-views
================================================
12. Use drf-spectacular app to generate docs and schema which are OpenAPI 3.0-compliant schemas
13. add app in settings.py
14. Update DEFAULT_SCHEMA_CLASS in the REST_FRAMEWORK to over ride the default schema generator DRF provides
================================================
15. Register User with admin
16. customize admin user view
        ref:1. https://django-improved-user.readthedocs.io/en/stable/admin_usage.html
            2. https://docs.djangoproject.com/en/5.1/ref/contrib/admin/#customizing-the-admin-interface
17.Created UserAdmin and registered with admin.site.urls
================================================
18. Created menu app
19. created model MenuItem
20.Registered model in menu/admin.py to show the help text for the columns.
21. prepare the migrations
22. create a serializer for the MenuItems
23. Create a view for get/item/{id} - MenuItemsDetailsView
24. Create token url for generating token--register the APP
25. Create a me url to return the user
=================================================
26. Create UnitTests for token url and me url
27.Create post method to create menu items

